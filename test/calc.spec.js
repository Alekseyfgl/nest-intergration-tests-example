const calc = require('./calc');

describe('Тесты для функции калькулятора', () => {
  describe('Операция сложения', () => {
    it('должна правильно складывать два положительных числа', () => {
      expect(calc(5, 3, 'add')).toBe(8);
    });

    it('должна правильно складывать отрицательные числа', () => {
      expect(calc(-5, -3, 'add')).toBe(-8);
    });

    it('должна правильно складывать положительное и отрицательное числа', () => {
      expect(calc(5, -3, 'add')).toBe(2);
    });

    it('должна правильно складывать с нулем', () => {
      expect(calc(5, 0, 'add')).toBe(5);
    });

    it('должна правильно складывать дробные числа', () => {
      expect(calc(2.5, 3.5, 'add')).toBe(6);
    });
  });

  describe('Операция вычитания', () => {
    it('должна правильно вычитать два положительных числа', () => {
      expect(calc(5, 3, 'subtract')).toBe(2);
    });

    it('должна правильно вычитать отрицательные числа', () => {
      expect(calc(-5, -3, 'subtract')).toBe(-2);
    });

    it('должна правильно вычитать положительное и отрицательное числа', () => {
      expect(calc(5, -3, 'subtract')).toBe(8);
    });

    it('должна правильно вычитать ноль', () => {
      expect(calc(5, 0, 'subtract')).toBe(5);
    });
  });

  describe('Операция умножения', () => {
    it('должна правильно умножать два положительных числа', () => {
      expect(calc(5, 3, 'multiply')).toBe(15);
    });

    it('должна правильно умножать отрицательные числа', () => {
      expect(calc(-5, -3, 'multiply')).toBe(15);
    });

    it('должна правильно умножать положительное и отрицательное числа', () => {
      expect(calc(5, -3, 'multiply')).toBe(-15);
    });

    it('должна возвращать ноль при умножении на ноль', () => {
      expect(calc(5, 0, 'multiply')).toBe(0);
    });
  });

  describe('Операция деления', () => {
    it('должна правильно делить два положительных числа', () => {
      expect(calc(6, 3, 'divide')).toBe(2);
    });

    it('должна правильно делить отрицательные числа', () => {
      expect(calc(-6, -3, 'divide')).toBe(2);
    });

    it('должна правильно делить положительное и отрицательное числа', () => {
      expect(calc(6, -3, 'divide')).toBe(-2);
    });

    it('должна выбрасывать ошибку при делении на ноль', () => {
      expect(() => calc(5, 0, 'divide')).toThrow('Деление на ноль невозможно');
    });

    it('должна правильно обрабатывать дробные результаты', () => {
      expect(calc(5, 2, 'divide')).toBe(2.5);
    });
  });

  describe('Проверка типов и ошибок', () => {
    it('должна выбрасывать ошибку при передаче нечисловых аргументов', () => {
      expect(() => calc('5', 3, 'add')).toThrow('Оба аргумента должны быть числами');
      expect(() => calc(5, '3', 'add')).toThrow('Оба аргумента должны быть числами');
      expect(() => calc('5', '3', 'add')).toThrow('Оба аргумента должны быть числами');
    });

    it('должна выбрасывать ошибку при передаче неподдерживаемой операции', () => {
      expect(() => calc(5, 3, 'power')).toThrow('Неподдерживаемая операция: power');
      expect(() => calc(5, 3, '')).toThrow('Неподдерживаемая операция: ');
      expect(() => calc(5, 3, null)).toThrow('Неподдерживаемая операция: null');
    });
  });
}); 